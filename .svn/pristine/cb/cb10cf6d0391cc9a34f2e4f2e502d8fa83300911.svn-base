package com.gov.nha.bis.server.controller;

import java.util.HashMap;
import java.util.Locale;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.gov.nha.bis.server.model.State;
import com.gov.nha.bis.server.properties.ApplicationConstantConfig;
import com.gov.nha.bis.server.rest.service.TmsMasterService;

@CrossOrigin
@Controller
public class MasterDataController {

	private static final Logger logger = LogManager.getLogger(MasterDataController.class);

	@Autowired
	public ApplicationConstantConfig applicationConstantConfig;

	@Autowired
	public TmsMasterService tmsMasterService;

	public static final HashMap<String, String> stateMap = new HashMap<>();
	

	@RequestMapping(value="/urbanMaster",method = RequestMethod.POST)
	public @ResponseBody String ruralMasterSearch(HttpServletRequest request,@ModelAttribute("stateDetails") State stateDetails,ModelMap model,Locale locale){
		ObjectMapper mapper = new ObjectMapper();
		try {
			return  mapper.writeValueAsString(stateMap);
		} catch (JsonProcessingException e) {
			logger.info(e.getMessage());
			return null;
		}
	}

	@PostConstruct
	public @ResponseBody String ruralMasterSearch(){
		ObjectMapper mapper = new ObjectMapper();
		try {
			String response  =tmsMasterService.getStateMaster(); 
			logger.info("getInvestigationDocumentForProcedures"+response);
			if(!ObjectUtils.isEmpty(response)) {		
				JSONObject userJson= new JSONObject(response);
				if(userJson.getString("status")!=null 
						&& userJson.getString("status").equalsIgnoreCase("SUCCESS")
						&&  userJson.getJSONObject("data")!=null) {
					
					JSONObject jsonObject = userJson.getJSONObject("data");
					jsonObject.keySet().forEach(keyStr ->
				    {
				        Object keyvalue = jsonObject.get(keyStr);
				        //System.out.println("key: "+ keyStr + " value: " + keyvalue);
				        stateMap.put(keyStr,keyvalue.toString());
				    });
				}
			}
			return  mapper.writeValueAsString(stateMap);
		} catch (JsonProcessingException e) {
			logger.info(e.getMessage());
			return null;
		}
	}
}
